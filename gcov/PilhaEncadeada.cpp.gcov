        -:    0:Source:PilhaEncadeada.cpp
        -:    0:Graph:../bin/obj/PilhaEncadeada.gcno
        -:    0:Data:../bin/obj/PilhaEncadeada.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "../include/PilhaEncadeada.hpp"
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:namespace _PilhaEncadeada {
        -:    5:    struct _elemento {
        -:    6:        _elemento* next;
        -:    7:        void* data;
        -:    8:    };
        -:    9:}   
        -:   10:
        -:   11:// MÃ©todo destrutor
       56:   12:_PilhaEncadeada::_base::~_base() {
       28:   13:    while(_elementCount > 0) {
    #####:   14:        free(pop());
        -:   15:    }
       28:   16:};
        -:   17:
      120:   18:bool  _PilhaEncadeada::_base::push(void* elemento, int size) {
      120:   19:    _elemento* e = (_elemento*) malloc(sizeof(_elemento));
        -:   20:    
      120:   21:    if (e == nullptr)
    #####:   22:        return false;
        -:   23:
      120:   24:    e->next = _top;
      120:   25:    e->data = malloc(size);
        -:   26:
      120:   27:    if (e->data == nullptr) {
    #####:   28:        free(e);
    #####:   29:        return false;
        -:   30:    }
        -:   31:
      120:   32:    memcpy(e->data, elemento, size);
        -:   33:
      120:   34:    _top = e;
      120:   35:    _elementCount++;
      120:   36:    return true;
        -:   37:}
        -:   38:
      124:   39:void* _PilhaEncadeada::_base::pop() {
      124:   40:    _elemento* e = _top;
        -:   41:
      124:   42:    if (e == nullptr)
        4:   43:        return nullptr;
        -:   44:
      120:   45:    _top = e->next;
      120:   46:    void* data = e->data;
      120:   47:    free(e);
      120:   48:    _elementCount--;
      120:   49:    return data;
        -:   50:}
        -:   51:
       32:   52:void* _PilhaEncadeada::_base::top() {
       32:   53:    if (_top == nullptr)
        8:   54:        return nullptr;
        -:   55:
       24:   56:    return _top->data;
        -:   57:}
        -:   58:
       76:   59:int _PilhaEncadeada::_base::elementCount() {
       76:   60:    return _elementCount;
       21:   61:}
